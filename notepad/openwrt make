make defconfig
will produce a general purpose configuration of the build system including a check of dependencies and prerequisites for the build environment etc
will check for dependencies. Install missing and run again.

Download sources and multi core compile
Before running final make it is best to issue make download command first, this step will pre-fetch all source code for all dependencies, this enables you compile with more cpu cores (for example, make -j10, for 4 core, 8 thread cpu works great).

If you try compiling OpenWrt on multiple cores and don't download all source files for all dependency packages it is very likely that your build will fail.

make download
Building Images
Everything is now ready for building the image(s), which is done with one single command:

make
or
make world
This simple command will trigger a cascade of activity. As already stated, it will

compile the toolchain
then crosscompile the sources with this toolchain
create opkg-packages




generate a firmware image file ready to be flashed.
Make Tips
Building in the 



background
If you intend to use your system while building, you can have the build process use only idle I/O and CPU capacity like this (4 core, 8 thread CPU):

make download
ionice -c 3 nice -n19 make -j 10



Building single Packages
When developing or packaging software for OpenWrt, it is convenient to be able to build only the package in question (e.g. with package cups):


在为OpenWrt开发或打包软件时，只能构建有问题的软件包（例如使用软件包）很方便
make package/cups/compile V=s



For a rebuild:
build 所有包
make package/cups/{#Clean,compile,install} V=s


It doesn't matter what feed the package is located in, this same syntax works for any installed package.

Spotting build errors
If for some reason the build fails, the easiest way to spot the error is to do:

make V=s 2>&1 | tee build.log | grep -i error
The above saves a full verbose copy of the build output (with stdout piped to stderr) in /openwrt/trunk/build.log and only shows errors on the screen.

Another example:

ionice -c 3 nice -n 20 make -j 2 V=s CONFIG_DEBUG_SECTION_MISMATCH=y 2>&1 | tee build.log | egrep -i '(warn|error)'
The above saves a full verbose copy of the build output (with stdout piped to stderr) in build.log and outputs only warnings and errors while building using only background resources on a dual core CPU.

Yet another way to focus on the problem without having to wade through tons of output from Make as described above is to check the corresponding log in 'logs' folder. IE: if the build fails at "make[3] -C package/kernel/mac80211 compile", then you can go to <buildroot>/logs/package/kernel/mac80211 and view the compile.txt found there.

Getting beep notification
Depending on your CPU, the process will take a while, or while longer. If you want an acoustic notification, you could use echo -e '\a':

make V=s ; echo -e '\a'
Skipping failed packages
If you are building everything (not just packages enough to make a flashable image) and build stops on a package you don't care about you can skip failed packages by using IGNORE_ERRORS=1

跳过错误
IGNORE_ERRORS=1 make <make options>



#Cleaning Up
You might need to #Clean your build environment every now and then. The following make-targets are useful for that job:

#Clean
make #Clean
deletes contents of the directories /bin and /build_dir. make #Clean does not remove the toolchain, it also avoids #Cleaning architectures/targets other than the one you have selected in your .config

Dir#Clean
make dir#Clean
deletes contents of the directories /bin and /build_dir and additionally /staging_dir and /toolchain (=the cross-compile tools) and /logs. 'Dir#Clean' is your basic "Full #Clean" operation.

Dist#Clean
make dist#Clean
nukes everything you have compiled or configured and also deletes all downloaded feeds contents and package sources.

CAUTION: In addition to all else, this will erase your build configuration (<buildroot_dir>/.config), your toolchain and all other sources. Use with care!

There are numerous other functionalities in the OpenWrt build system, but the above should have covered some of the fundamentals.

#Clean small part
In more time, you may not want to #Clean so many objects, then you can use some of the commands below to do it.

##Clean linux objects.

make target/linux/#Clean

##Clean package base-files objects.

make package/base-files/#Clean

##Clean luci.

make package/luci/#Clean